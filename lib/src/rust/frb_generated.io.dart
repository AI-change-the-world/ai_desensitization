// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/nlp.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'nlp/tags.dart';
import 'nlp/words.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  OperationConfig dco_decode_box_autoadd_operation_config(dynamic raw);

  @protected
  Tag dco_decode_box_autoadd_tag(dynamic raw);

  @protected
  WordcutTag dco_decode_box_autoadd_wordcut_tag(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<Word> dco_decode_list_word(dynamic raw);

  @protected
  OperationConfig dco_decode_operation_config(dynamic raw);

  @protected
  OtherTags dco_decode_other_tags(dynamic raw);

  @protected
  Tag dco_decode_tag(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  Word dco_decode_word(dynamic raw);

  @protected
  WordcutTag dco_decode_wordcut_tag(dynamic raw);

  @protected
  Words dco_decode_words(dynamic raw);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  OperationConfig sse_decode_box_autoadd_operation_config(
    SseDeserializer deserializer,
  );

  @protected
  Tag sse_decode_box_autoadd_tag(SseDeserializer deserializer);

  @protected
  WordcutTag sse_decode_box_autoadd_wordcut_tag(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<Word> sse_decode_list_word(SseDeserializer deserializer);

  @protected
  OperationConfig sse_decode_operation_config(SseDeserializer deserializer);

  @protected
  OtherTags sse_decode_other_tags(SseDeserializer deserializer);

  @protected
  Tag sse_decode_tag(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  Word sse_decode_word(SseDeserializer deserializer);

  @protected
  WordcutTag sse_decode_wordcut_tag(SseDeserializer deserializer);

  @protected
  Words sse_decode_words(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_operation_config(
    OperationConfig self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_box_autoadd_tag(Tag self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_wordcut_tag(
    WordcutTag self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_word(List<Word> self, SseSerializer serializer);

  @protected
  void sse_encode_operation_config(
    OperationConfig self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_other_tags(OtherTags self, SseSerializer serializer);

  @protected
  void sse_encode_tag(Tag self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_word(Word self, SseSerializer serializer);

  @protected
  void sse_encode_wordcut_tag(WordcutTag self, SseSerializer serializer);

  @protected
  void sse_encode_words(Words self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;
}
