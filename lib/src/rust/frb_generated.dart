// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/nlp.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'nlp/jieba_tag.dart';
import 'nlp/words.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.8.0';

  @override
  int get rustContentHash => -2093844258;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_ai_desensitization',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  String crateApiNlpGetTagName({required JiebaTag tag});

  Future<Words> crateApiNlpGetWordSegResult({required String text});

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  Future<String> crateApiNlpReplaceEntities({
    required String text,
    required String i18N,
  });
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String crateApiNlpGetTagName({required JiebaTag tag}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_jieba_tag(tag, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiNlpGetTagNameConstMeta,
        argValues: [tag],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNlpGetTagNameConstMeta =>
      const TaskConstMeta(debugName: "get_tag_name", argNames: ["tag"]);

  @override
  Future<Words> crateApiNlpGetWordSegResult({required String text}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(text, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_words,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiNlpGetWordSegResultConstMeta,
        argValues: [text],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNlpGetWordSegResultConstMeta =>
      const TaskConstMeta(debugName: "get_word_seg_result", argNames: ["text"]);

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGreetConstMeta,
        argValues: [name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta =>
      const TaskConstMeta(debugName: "greet", argNames: ["name"]);

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Future<String> crateApiNlpReplaceEntities({
    required String text,
    required String i18N,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(text, serializer);
          sse_encode_String(i18N, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiNlpReplaceEntitiesConstMeta,
        argValues: [text, i18N],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNlpReplaceEntitiesConstMeta => const TaskConstMeta(
    debugName: "replace_entities",
    argNames: ["text", "i18N"],
  );

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  JiebaTag dco_decode_box_autoadd_jieba_tag(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_jieba_tag(raw);
  }

  @protected
  JiebaTag dco_decode_jieba_tag(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return JiebaTag_N();
      case 1:
        return JiebaTag_Nr();
      case 2:
        return JiebaTag_Ns();
      case 3:
        return JiebaTag_Nt();
      case 4:
        return JiebaTag_Nz();
      case 5:
        return JiebaTag_V();
      case 6:
        return JiebaTag_Vd();
      case 7:
        return JiebaTag_Vn();
      case 8:
        return JiebaTag_A();
      case 9:
        return JiebaTag_Ad();
      case 10:
        return JiebaTag_An();
      case 11:
        return JiebaTag_D();
      case 12:
        return JiebaTag_Dg();
      case 13:
        return JiebaTag_R();
      case 14:
        return JiebaTag_Rr();
      case 15:
        return JiebaTag_Rz();
      case 16:
        return JiebaTag_M();
      case 17:
        return JiebaTag_Mq();
      case 18:
        return JiebaTag_Q();
      case 19:
        return JiebaTag_P();
      case 20:
        return JiebaTag_C();
      case 21:
        return JiebaTag_U();
      case 22:
        return JiebaTag_Ug();
      case 23:
        return JiebaTag_Us();
      case 24:
        return JiebaTag_E();
      case 25:
        return JiebaTag_O();
      case 26:
        return JiebaTag_S();
      case 27:
        return JiebaTag_X(dco_decode_String(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Word> dco_decode_list_word(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_word).toList();
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  Word dco_decode_word(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Word(
      word: dco_decode_String(arr[0]),
      tag: dco_decode_jieba_tag(arr[1]),
    );
  }

  @protected
  Words dco_decode_words(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Words(field0: dco_decode_list_word(arr[0]));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  JiebaTag sse_decode_box_autoadd_jieba_tag(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_jieba_tag(deserializer));
  }

  @protected
  JiebaTag sse_decode_jieba_tag(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return JiebaTag_N();
      case 1:
        return JiebaTag_Nr();
      case 2:
        return JiebaTag_Ns();
      case 3:
        return JiebaTag_Nt();
      case 4:
        return JiebaTag_Nz();
      case 5:
        return JiebaTag_V();
      case 6:
        return JiebaTag_Vd();
      case 7:
        return JiebaTag_Vn();
      case 8:
        return JiebaTag_A();
      case 9:
        return JiebaTag_Ad();
      case 10:
        return JiebaTag_An();
      case 11:
        return JiebaTag_D();
      case 12:
        return JiebaTag_Dg();
      case 13:
        return JiebaTag_R();
      case 14:
        return JiebaTag_Rr();
      case 15:
        return JiebaTag_Rz();
      case 16:
        return JiebaTag_M();
      case 17:
        return JiebaTag_Mq();
      case 18:
        return JiebaTag_Q();
      case 19:
        return JiebaTag_P();
      case 20:
        return JiebaTag_C();
      case 21:
        return JiebaTag_U();
      case 22:
        return JiebaTag_Ug();
      case 23:
        return JiebaTag_Us();
      case 24:
        return JiebaTag_E();
      case 25:
        return JiebaTag_O();
      case 26:
        return JiebaTag_S();
      case 27:
        var var_field0 = sse_decode_String(deserializer);
        return JiebaTag_X(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Word> sse_decode_list_word(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Word>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_word(deserializer));
    }
    return ans_;
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  Word sse_decode_word(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_word = sse_decode_String(deserializer);
    var var_tag = sse_decode_jieba_tag(deserializer);
    return Word(word: var_word, tag: var_tag);
  }

  @protected
  Words sse_decode_words(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_word(deserializer);
    return Words(field0: var_field0);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_box_autoadd_jieba_tag(
    JiebaTag self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_jieba_tag(self, serializer);
  }

  @protected
  void sse_encode_jieba_tag(JiebaTag self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case JiebaTag_N():
        sse_encode_i_32(0, serializer);
      case JiebaTag_Nr():
        sse_encode_i_32(1, serializer);
      case JiebaTag_Ns():
        sse_encode_i_32(2, serializer);
      case JiebaTag_Nt():
        sse_encode_i_32(3, serializer);
      case JiebaTag_Nz():
        sse_encode_i_32(4, serializer);
      case JiebaTag_V():
        sse_encode_i_32(5, serializer);
      case JiebaTag_Vd():
        sse_encode_i_32(6, serializer);
      case JiebaTag_Vn():
        sse_encode_i_32(7, serializer);
      case JiebaTag_A():
        sse_encode_i_32(8, serializer);
      case JiebaTag_Ad():
        sse_encode_i_32(9, serializer);
      case JiebaTag_An():
        sse_encode_i_32(10, serializer);
      case JiebaTag_D():
        sse_encode_i_32(11, serializer);
      case JiebaTag_Dg():
        sse_encode_i_32(12, serializer);
      case JiebaTag_R():
        sse_encode_i_32(13, serializer);
      case JiebaTag_Rr():
        sse_encode_i_32(14, serializer);
      case JiebaTag_Rz():
        sse_encode_i_32(15, serializer);
      case JiebaTag_M():
        sse_encode_i_32(16, serializer);
      case JiebaTag_Mq():
        sse_encode_i_32(17, serializer);
      case JiebaTag_Q():
        sse_encode_i_32(18, serializer);
      case JiebaTag_P():
        sse_encode_i_32(19, serializer);
      case JiebaTag_C():
        sse_encode_i_32(20, serializer);
      case JiebaTag_U():
        sse_encode_i_32(21, serializer);
      case JiebaTag_Ug():
        sse_encode_i_32(22, serializer);
      case JiebaTag_Us():
        sse_encode_i_32(23, serializer);
      case JiebaTag_E():
        sse_encode_i_32(24, serializer);
      case JiebaTag_O():
        sse_encode_i_32(25, serializer);
      case JiebaTag_S():
        sse_encode_i_32(26, serializer);
      case JiebaTag_X(field0: final field0):
        sse_encode_i_32(27, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_word(List<Word> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_word(item, serializer);
    }
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_word(Word self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.word, serializer);
    sse_encode_jieba_tag(self.tag, serializer);
  }

  @protected
  void sse_encode_words(Words self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_word(self.field0, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
