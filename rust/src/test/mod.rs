#[cfg(test)]
mod tests {
    use jieba_rs::Jieba;

    #[test]
    fn it_works() {
        assert_eq!(2 + 2, 4);
    }

    #[test]
    fn test_jieba() {
        let jieba = Jieba::new();
        let address = "广东省深圳市南山区科技园南区,是一个有意思的科技园区。";
        let words = jieba.cut(address, false);
        println!("{:?}", words);
        let words = jieba.tag(address, false);
        println!("{:?}", words);
        let words = jieba.tag(&"张三丰", false);
        println!("{:?}", words);
        let words = jieba.tag(&"words", false);
        println!("{:?}", words);
    }

    use std::collections::HashMap;

    use crate::nlp::words::Words;

    fn split_surname(name: &str) -> Option<(&str, &str)> {
        let surnames: Vec<&'static str> = vec![
            // 复姓按长度降序排列
            "欧阳", "太史", "端木", "上官", "司马", "东方", "独孤", "南宫", "万俟", "闻人", "夏侯",
            "诸葛", "尉迟", "公羊", "赫连", "澹台", "皇甫", "宗政", "濮阳", "公冶", "太叔", "申屠",
            "公孙", "慕容", "仲孙", "钟离", "长孙", "宇文", "司徒", "鲜于", "司空", "闾丘", "子车",
            "亓官", "司寇", "巫马", "公西", "颛孙", "壤驷", "公良", "漆雕", "乐正", "宰父", "谷梁",
            "拓跋", "夹谷", "轩辕", "令狐", "段干", "百里", "呼延", "东郭", "南门", "羊舌", "微生",
            "公户", "公玉", "公仪", "梁丘", "公仲", "公上", "公门", "公山", "公坚", "左丘", "公伯",
            "西门", "公祖", "第五", "公乘", "贯丘", "公皙", "南荣", "东里", "东宫", "仲长", "子书",
            "子桑", "即墨", "达奚", "褚师", // 单姓
            "赵", "钱", "孙", "李", "周", "吴", "郑", "王", "冯", "陈", "褚", "卫", "蒋", "沈",
            "韩", "杨", "朱", "秦", "尤", "许", "何", "吕", "施", "张", "孔", "曹", "严", "华",
            "金", "魏", "陶", "姜", "戚", "谢", "邹", "喻", "柏", "水", "窦", "章", "云", "苏",
            "潘", "葛", "奚", "范", "彭", "郎", "鲁", "韦", "昌", "马", "苗", "凤", "花", "方",
            "俞", "任", "袁", "柳", "酆", "鲍", "史", "唐", "费", "廉", "岑", "薛", "雷", "贺",
            "倪", "汤", "滕", "殷", "罗", "毕", "郝", "邬", "安", "常", "乐", "于", "时", "傅",
            "皮", "卞", "齐", "康", "伍", "余", "元", "卜", "顾", "孟", "平", "黄", "和", "穆",
            "萧", "尹", "姚", "邵", "湛", "汪", "祁", "毛", "禹", "狄", "米", "贝", "明", "臧",
            "计", "伏", "成", "戴", "谈", "宋", "茅", "庞", "熊", "纪", "舒", "屈", "项", "祝",
            "董", "梁", "杜", "阮", "蓝", "闵", "席", "季", "麻", "强", "贾", "路", "娄", "危",
            "江", "童", "颜", "郭", "梅", "盛", "林", "刁", "钟", "徐", "邱", "骆", "高", "夏",
            "蔡", "田", "樊", "胡", "凌", "霍", "虞", "万", "支", "柯", "昝", "管", "卢", "莫",
            "经", "房", "裘", "缪", "干", "解", "应", "宗", "丁", "宣", "贲", "邓", "郁", "单",
            "杭", "洪", "包", "诸", "左", "石", "崔", "吉", "钮", "龚", "程", "嵇", "邢", "滑",
            "裴", "陆", "荣", "翁", "荀", "羊", "于", "惠", "甄", "曲", "家", "封", "芮", "羿",
            "储", "靳", "汲", "邴", "糜", "松", "井", "段", "富", "巫", "乌", "焦", "巴", "弓",
            "牧", "隗", "山", "谷", "车", "侯", "宓", "蓬", "全", "郗", "班", "仰", "秋", "仲",
            "伊", "宫", "宁", "仇", "栾", "暴", "甘", "钭", "厉", "戎", "祖", "武", "符", "刘",
            "景", "詹", "束", "龙", "叶", "幸", "司", "韶", "郜", "黎", "蓟", "溥", "印", "宿",
            "白", "怀", "蒲", "邰", "从", "鄂", "索", "咸", "籍", "赖", "卓", "蔺", "屠", "蒙",
            "池", "乔", "阴", "鬱", "胥", "能", "苍", "双", "闻", "莘", "党", "翟", "谭", "贡",
            "劳", "逄", "姬", "申", "扶", "堵", "冉", "宰", "郦", "雍", "卻", "璩", "桑", "桂",
            "濮", "牛", "寿", "通", "边", "扈", "燕", "冀", "浦", "尚", "农", "温", "别", "庄",
            "晏", "柴", "瞿", "阎", "充", "慕", "连", "茹", "习", "宦", "艾", "鱼", "容", "向",
            "古", "易", "慎", "戈", "廖", "庾", "终", "暨", "居", "衡", "步", "都", "耿", "满",
            "弘", "匡", "国", "文", "寇", "广", "禄", "阙", "东", "欧", "殳", "沃", "利", "蔚",
            "越", "夔", "隆", "师", "巩", "厍", "聂", "晁", "勾", "敖", "融", "冷", "訾", "辛",
            "阚", "那", "简", "饶", "空", "曾", "毋", "沙", "乜", "养", "鞠", "须", "丰", "巢",
            "关", "蒯", "相", "查", "后", "荆", "红", "游", "郏", "竺", "权", "逯", "盖", "益",
            "桓", "公", "万俟", "司马", "上官", "欧阳", "夏侯", "诸葛", "闻人", "东方", "赫连",
            "皇甫", "羊舌", "尉迟", "公羊", "澹台", "公冶", "宗政", "濮阳", "单于", "太叔", "申屠",
            "公孙", "仲孙", "轩辕", "令狐", "钟离", "宇文", "长孙", "慕容", "司徒", "司空", "闾丘",
            "子车", "亓官", "司寇", "巫马", "公西", "颛孙", "壤驷", "公良", "漆雕", "乐正", "宰父",
            "谷梁", "拓跋", "夹谷", "段干", "百里", "呼延", "东郭", "南门", "羊角", "微生", "梁丘",
            "左丘", "东门", "西门", "南宫", "第五", "公仪", "公乘", "太史", "仲长", "叔孙", "屈突",
            "尔朱", "东乡", "相里", "胡母", "司城", "张廖", "雍门", "毋丘", "贺兰", "綦毋", "屋庐",
            "独孤", "南郭", "北宫", "王孙",
        ];
        for &surname in surnames.iter() {
            if name.starts_with(surname) {
                let remaining = &name[surname.len()..];
                return Some((surname, remaining));
            }
        }
        None
    }

    fn get_suffix(n: usize) -> String {
        let heavenly_stems = ["甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"];
        if n == 0 {
            String::new()
        } else if n <= heavenly_stems.len() {
            heavenly_stems[n - 1].to_string()
        } else {
            format!("{}", n)
        }
    }

    fn mask_names(names: &[&str]) -> Vec<String> {
        let mut surname_counts = HashMap::new();
        for &name in names {
            if let Some((surname, _)) = split_surname(name) {
                *surname_counts.entry(surname).or_insert(0) += 1;
            }
        }

        let mut surname_order = HashMap::new();
        let mut results = Vec::new();
        for &name in names {
            let (surname, given) = match split_surname(name) {
                Some(parts) => parts,
                None => {
                    results.push(name.to_string());
                    continue;
                }
            };

            let total = *surname_counts.get(surname).unwrap_or(&0);
            let count = surname_order.entry(surname).or_insert(0);
            *count += 1;
            let current = *count;

            let masked_given = "某".repeat(given.chars().count());
            let result = if total > 1 {
                let suffix = get_suffix(current);
                format!("{}{}{}", surname, masked_given, suffix)
            } else {
                format!("{}{}", surname, masked_given)
            };
            results.push(result);
        }

        results
    }

    #[test]
    fn test_name_mask() {
        let names = vec!["张三", "李四", "张三丰", "张伟", "欧阳峰", "欧阳娜娜"];
        let masked = mask_names(&names);
        for name in masked {
            println!("{}", name);
        }
    }

    #[test]
    fn test_string_mask() {
        let s = "
        在一个风和日丽的上午，张三和李四相约在咖啡馆讨论最近的项目进展。张三丰恰好路过，看到两人激烈地比划着手势，忍不住凑上去听了一耳朵。

“张伟那边的数据分析做好了吗？”李四皱着眉问道。

“他正在调整模型参数，”张三叹了口气，“不过欧阳峰那边提出了一个新思路，可能能优化结果。”

“欧阳娜娜也参与了吗？”张三丰好奇地问。

“她负责整理文档，逻辑清晰得很，绝对靠谱。”李四笑了笑，“再等两天，咱们就能交付了。”

几人相视一笑，看来这个项目稳了。
        ";
        // let masked = mask_names(&names);
        let mut words = Words::get_word_with_tag(&s);
        words.print_human_names();
        let r = words.mask("zh_cn".to_owned());
        println!("{}", r);
    }
}
